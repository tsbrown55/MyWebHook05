@Page "/upload-files"
@using System.Linq
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<uploadfiles>
    logger

    <h1>Upload Files</h1>

    <p>
        <label>
            Upload up to @maxAllowedFiles files:
            <inputfile onchange="@OnInputFileChange" multiple />
        </label>
    </p>

    @if (files.Count > 0)
{
        <div class="card">
            <div class="card-body">
                <ul>
                    @foreach (var file in files)
                {
                        <li>
                            File: @file.Name
                            <br>
                            @if (FileUpload(uploadResults, file.Name, logger,
                            out var result))
                        {
                            <span>
                                Stored File Name: @result.StoredFileName
                            </span>
                        }
                        else
                        {
                            <span>
                                There was an error uploading the file
                                (Error: @result.ErrorCode).
                            </span>
                        }
                        </li>
                }
                </ul>
            </div>
        </div>
}

    @code {
    private IList<file> files = new List<file>();
    private IList<uploadresult> uploadResults = new List<uploadresult>();
    private int maxAllowedFiles = 3;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1024 * 15;
        var upload = false;
        using var content = new MultipartFormDataContent();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
                if (uploadResults.SingleOrDefault(f => f.FileName == file.Name) is null)
                {
                    var fileContent = new StreamContent(file.OpenReadStream());
                    files.Add(new File() { Name = file.Name, });
                    if (file.Size < maxFileSize)
                    {
                        content.Add(
                            content: fileContent,
                            name: "\"files\"",
                            fileName: file.Name);
                        upload = true;
                    }
                    else
                    {
                        logger.LogInformation("{FileName} not uploaded", file.Name);
                        uploadResults.Add(
                            new UploadResult()
                            {
                              FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false,
                            });
                    }
                    }
                }

                if (upload)
                {
                var response = await Http.PostAsync("/Filesave", content);

                var newUploadResults = await response.Content
                .ReadFromJsonAsync<ilist<UploadResult>>();

        uploadResults = uploadResults.Concat(newUploadResults).ToList();
    }

    shouldRender = true;
}

    private static bool FileUpload(IList<UploadResult> uploadResults,
        string fileName, ILogger<UploadFiles> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName);

        if (result is null)
        {
            logger.LogInformation("{FileName} not uploaded", fileName);
            result = new UploadResult();
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string Name { get; set; }
    }
}
